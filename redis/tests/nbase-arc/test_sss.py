import unittest
import time
import redis
import sys

access_port = 6379

def assert_1(resp):
    redis.rr_assert_equal(resp, 1)

def assert_0(resp):
    redis.rr_assert_equal(resp, 0)

def assert_err(resp):
    redis.rr_assert_substring('ERR', resp)

def assert_wrongtype(resp):
    redis.rr_assert_substring('WRONGTYPE', resp)

class TestSSS (unittest.TestCase):

    def setUp(self):
        self.conn = redis.RedisClient('localhost', access_port)
        self.r = self.conn.do_generic_request
        self.assert_equal = redis.rr_assert_equal
        self.assert_subs = redis.rr_assert_substring

    def tearDown(self):
        self.conn.close()

    def test_s3lget(self):
        self.r('del', 'uuid')
        self.r('del', 'uuid1')
        self.assert_subs(".*wrong number.*", self.r('s3lget', 'ks', 'uuid'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '10000')
        self.r('s3ladd', 'ks1', 'uuid', 'svc', 'key', 'val', '10000')
        self.r('s3ladd', 'ks', 'uuid1', 'svc', 'key', 'val', '10000')
        self.assert_equal(['val', 'val2', 'val1', 'val'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(['val'], self.r('s3lget', 'ks1', 'uuid', 'svc', 'key'))
        self.assert_equal(['val'], self.r('s3lget', 'ks', 'uuid1', 'svc', 'key'))
        self.assert_equal([], self.r('s3lget', 'nosuchks', 'nosuchid', 'key', 'val'))

    def test_s3sget(self):
        self.r('del', 'uuid')
        self.r('del', 'uuid1')
        self.assert_subs(".*wrong number.*", self.r('s3sget', 'ks', 'uuid'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val', '10000')
        self.r('s3sadd', 'ks1', 'uuid', 'svc', 'key', 'val', '10000')
        self.r('s3sadd', 'ks', 'uuid1', 'svc', 'key', 'val', '10000')
        self.assert_equal(['val', 'val1', 'val2'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(['val'], self.r('s3sget', 'ks1', 'uuid', 'svc', 'key'))
        self.assert_equal(['val'], self.r('s3sget', 'ks', 'uuid1', 'svc', 'key'))
        self.assert_equal([], self.r('s3sget', 'nosuchks', 'nosuchid', 'key', 'val'))

    def test_s3lmget(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lmget', 'ks', 'uuid'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key3', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key4', 'val3', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key5', 'val4', '10000')
        self.assert_subs(".*wrong kind.*", self.r('s3smget', 'ks', 'uuid', 'svc'))
        self.assert_equal(['key1', 'val1', 'key2', 'val1', 'key3', 'val2', 'key4', 'val3', 'key5', 'val4'], self.r('s3lmget', 'ks', 'uuid', 'svc'))
        self.assert_equal(['key3', 'val2', 'key2', 'val1', 'nosuchkey', None, 'key1', 'val1'], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key3', 'key2', 'nosuchkey', 'key1'))
        self.assert_equal([], self.r('s3lmget', 'ks', 'uuid', 'nosuchsvc'))
        self.assert_equal(['keya', None, 'keyb', None, 'keyc', None], self.r('s3lmget', 'ks', 'uuid', 'nosuchsvc', 'keya', 'keyb', 'keyc'))
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'dupkey', 'dupval', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'dupkey', 'dupval', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'dupkey', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'dupkey', 'val3', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val4', '10000')
        self.assert_equal(['dupkey', 'dupval', 'dupkey', 'dupval', 'dupkey', 'val2', 'dupkey', 'val3'], self.r('s3lmget', 'ks', 'uuid', 'svc2', 'dupkey'))
        self.assert_equal(['dupkey', 'dupval', 'dupkey', 'dupval', 'dupkey', 'val2', 'dupkey', 'val3', 'key2', 'val4'], self.r('s3lmget', 'ks', 'uuid', 'svc2'))
        self.assert_equal(['key2', 'val4', 'dupkey', 'dupval', 'dupkey', 'dupval', 'dupkey', 'val2', 'dupkey', 'val3'], self.r('s3lmget', 'ks', 'uuid', 'svc2', 'key2', 'dupkey'))

    def test_s3smget(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3smget', 'ks', 'uuid'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key3', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key4', 'val3', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key5', 'val4', '10000')
        self.assert_subs(".*wrong kind.*", self.r('s3lmget', 'ks', 'uuid', 'svc'))
        self.assert_equal(['key1', 'val1', 'key2', 'val1', 'key3', 'val2', 'key4', 'val3', 'key5', 'val4'], self.r('s3smget', 'ks', 'uuid', 'svc'))
        self.assert_equal(['key3', 'val2', 'key2', 'val1', 'nosuchkey', None, 'key1', 'val1'], self.r('s3smget', 'ks', 'uuid', 'svc', 'key3', 'key2', 'nosuchkey', 'key1'))
        self.assert_equal([], self.r('s3smget', 'ks', 'uuid', 'nosuchsvc'))
        self.assert_equal(['keya', None, 'keyb', None, 'keyc', None], self.r('s3smget', 'ks', 'uuid', 'nosuchsvc', 'keya', 'keyb', 'keyc'))
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'dupkey', 'dupval', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'dupkey', 'dupval', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'dupkey', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'dupkey', 'val3', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key2', 'val4', '10000')
        self.assert_equal(['dupkey', 'dupval', 'dupkey', 'val2', 'dupkey', 'val3'], self.r('s3smget', 'ks', 'uuid', 'svc2', 'dupkey'))
        self.assert_equal(['dupkey', 'dupval', 'dupkey', 'val2', 'dupkey', 'val3', 'key2', 'val4'], self.r('s3smget', 'ks', 'uuid', 'svc2'))
        self.assert_equal(['key2', 'val4', 'dupkey', 'dupval', 'dupkey', 'val2', 'dupkey', 'val3'], self.r('s3smget', 'ks', 'uuid', 'svc2', 'key2', 'dupkey'))
        self.assert_equal(['key2', 'val4', 'key2', 'val4', 'key2', 'val4'], self.r('s3smget', 'ks', 'uuid', 'svc2', 'key2', 'key2', 'key2'))

    def test_check(self):
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '10000')
        self.assert_equal(['val', 'val'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))
        self.assert_subs(".*wrong kind of value.*", self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(1, self.r('s3lrem', 'ks', 'uuid', 'svc'))
        self.assert_equal(1, self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val', '10000'))
        self.assert_equal(0, self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val', '10000'))
        self.assert_equal(['val'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))

    def test_s3lkeys(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lkeys', 'ks', 'uuid', 'svc', 'key'))
        self.r('set', 'uuid', '100')
        self.assert_subs(".*wrong.*", self.r('s3lkeys', 'ks', 'uuid', 'svc'))
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key4', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key3', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val', '100000')
        self.assert_equal(['key1', 'key2', 'key3', 'key4'], self.r('s3lkeys', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*wrong kind.*", self.r('s3skeys', 'ks', 'uuid', 'svc'))
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key3', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc3', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc4', 'key1', 'val', '100000')
        self.assert_equal(['key1'], self.r('s3lkeys', 'ks', 'uuid', 'svc1'))
        self.assert_equal(['key1', 'key2', 'key3'], self.r('s3lkeys', 'ks', 'uuid', 'svc2'))
        self.assert_equal(['svc', 'svc1', 'svc2', 'svc3', 'svc4'], self.r('s3lkeys', 'ks', 'uuid'))
        self.assert_equal([], self.r('s3skeys', 'ks', 'uuid'))
        self.assert_subs(".*wrong kind.*", self.r('s3skeys', 'ks', 'uuid', 'svc2'))

    def test_s3skeys(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lkeys', 'ks', 'uuid', 'svc', 'key'))
        self.r('set', 'uuid', '100')
        self.assert_subs(".*wrong.*", self.r('s3lkeys', 'ks', 'uuid', 'svc'))
        self.r('del', 'uuid')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key4', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key3', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val', '100000')
        self.assert_equal(['key1', 'key2', 'key3', 'key4'], self.r('s3skeys', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*wrong kind.*", self.r('s3lkeys', 'ks', 'uuid', 'svc'))
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key3', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc3', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc4', 'key1', 'val', '100000')
        self.assert_equal(['key1'], self.r('s3skeys', 'ks', 'uuid', 'svc1'))
        self.assert_equal(['key1', 'key2', 'key3'], self.r('s3skeys', 'ks', 'uuid', 'svc2'))
        self.assert_equal(['svc', 'svc1', 'svc2', 'svc3', 'svc4'], self.r('s3skeys', 'ks', 'uuid'))
        self.assert_equal([], self.r('s3lkeys', 'ks', 'uuid'))
        self.assert_subs(".*wrong kind.*", self.r('s3lkeys', 'ks', 'uuid', 'svc2'))

    def test_s3lvals(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lvals', 'ks', 'uuid'))
        self.assert_equal([], self.r('s3lvals', 'ks', 'uuid', 'svc'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val', '100000')
        self.assert_equal(['val', 'val', 'val'], self.r('s3lvals', 'ks', 'uuid', 'svc'))
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val2', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val3', '100000')
        self.assert_equal(['val1', 'val2', 'val3'], self.r('s3lvals', 'ks', 'uuid', 'svc'))
        self.assert_equal([], self.r('s3lvals', 'ks', 'uuid', 'no_such_svc'))
        self.assert_subs(".*wrong kind.*", self.r('s3svals', 'ks', 'uuid', 'svc'))

    def test_s3svals(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3svals', 'ks', 'uuid'))
        self.assert_equal([], self.r('s3svals', 'ks', 'uuid', 'svc'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val', '100000')
        self.assert_equal(['val', 'val'], self.r('s3svals', 'ks', 'uuid', 'svc'))
        self.r('del', 'uuid')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val2', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val3', '100000')
        self.assert_equal(['val1', 'val3', 'val2'], self.r('s3svals', 'ks', 'uuid', 'svc'))
        self.assert_equal([], self.r('s3svals', 'ks', 'uuid', 'no_such_svc'))
        self.assert_subs(".*wrong kind.*", self.r('s3lvals', 'ks', 'uuid', 'svc'))

    def test_s3ladd(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'val1', '100000'))
        self.assert_subs(".*ttl value is not a integer or out of range.*", self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val1', 'notaint'))
        self.assert_subs(".*ttl value is not a integer or out of range.*", self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000000000000000000000000000'))
        self.assert_equal(3, self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'val2', '100000', 'val1', '100000'))
        self.assert_subs(".*wrong kind.*", self.r('s3sget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal(['val1', 'val2', 'val1'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal(3, self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val', '100000', 'val', '100000', 'val2', '100000'))
        self.assert_equal(['key2', 'val', 'key2', 'val', 'key2', 'val2', 'key1', 'val1', 'key1', 'val2', 'key1', 'val1'], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(2, self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val3', '100000', 'val4', '100000'))
        self.assert_equal(['val1', 'val2', 'val1', 'val3', 'val4'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_subs(".*wrong kind.*", self.r('s3sadd', 'ks', 'uuid', 'svc', 'key3', 'val1', '100000'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'forever', 'value', '0')
        self.assert_equal(['value'], self.r('s3lget', 'ks', 'uuid', 'svc', 'forever'))

    def test_s3sadd(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'val1', '100000'))
        self.assert_subs(".*ttl value is not a integer or out of range.*", self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val1', 'notaint'))
        self.assert_subs(".*ttl value is not a integer or out of range.*", self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000000000000000000000000000'))
        self.assert_equal(2, self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val2', '100000', 'val1', '100000', 'val1', '100000'))
        self.assert_subs(".*wrong kind.*", self.r('s3lget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal(['val1', 'val2'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal(2, self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val', '100000', 'val', '100000', 'val2', '100000'))
        self.assert_equal(['key2', 'val', 'key2', 'val2', 'key1', 'val1', 'key1', 'val2'], self.r('s3smget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(2, self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'val3', '100000', 'val4', '100000'))
        self.assert_equal(['val1', 'val2', 'val3', 'val4'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_subs(".*wrong kind.*", self.r('s3ladd', 'ks', 'uuid', 'svc', 'key3', 'val1', '100000'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'forever', 'value', '0')
        self.assert_equal(['value'], self.r('s3sget', 'ks', 'uuid', 'svc', 'forever'))

    def test_s3lmadd(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'val1', '100000'))
        self.assert_subs(".*ttl value is not a integer or out of range.*", self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val1', 'notaint'))
        self.assert_subs(".*ttl value is not a integer or out of range.*", self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000000000000000000000000000'))
        self.assert_equal(3, self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key1', 'val2', '100000'))
        self.assert_subs(".*wrong kind.*", self.r('s3smget', 'ks', 'uuid', 'svc', 'key1,', 'key2'))
        self.assert_equal(['key2', 'val2', 'key1', 'val1', 'key1', 'val2'], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(3, self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key2', 'val', '100000', 'key2', 'val', '100000', 'key2', 'val2', '100000'))
        self.assert_equal(['key2', 'val2', 'key2', 'val', 'key2', 'val', 'key2', 'val2', 'key1', 'val1', 'key1', 'val2'], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(2, self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val3', '100000', 'key2', 'val4', '100000'))
        self.assert_equal(['val1', 'val2', 'val3'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal(['val2', 'val', 'val', 'val2', 'val4'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key2'))
        self.assert_subs(".*wrong kind.*", self.r('s3sadd', 'ks', 'uuid', 'svc', 'key3', 'val1', '100000'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'forever', 'value', '0')
        self.assert_equal(['value'], self.r('s3lget', 'ks', 'uuid', 'svc', 'forever'))
        self.assert_equal(0, self.r('s3lttl', 'ks', 'uuid', 'svc', 'forever'))

    def test_s3smadd(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'val1', '100000'))
        self.assert_subs(".*ttl value is not a integer or out of range.*", self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val1', 'notaint'))
        self.assert_subs(".*ttl value is not a integer or out of range.*", self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000000000000000000000000000'))
        self.assert_equal(2, self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key1', 'val1', '100000'))
        self.assert_subs(".*wrong kind.*", self.r('s3lmget', 'ks', 'uuid', 'svc', 'key1,', 'key2'))
        self.assert_equal(['key2', 'val2', 'key1', 'val1'], self.r('s3smget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(1, self.r('s3smadd', 'ks', 'uuid', 'svc', 'key2', 'val', '100000', 'key2', 'val', '100000', 'key2', 'val2', '100000'))
        self.assert_equal(['key2', 'val', 'key2', 'val2', 'key1', 'val1'], self.r('s3smget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(2, self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val3', '100000', 'key2', 'val4', '100000'))
        self.assert_equal(['val1', 'val3'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal(['val', 'val2', 'val4'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key2'))
        self.assert_subs(".*wrong kind.*", self.r('s3ladd', 'ks', 'uuid', 'svc', 'key3', 'val1', '100000'))
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'forever', 'value', '0')
        self.assert_equal(['value'], self.r('s3sget', 'ks', 'uuid', 'svc', 'forever'))
        self.assert_equal(0, self.r('s3sttl', 'ks', 'uuid', 'svc', 'forever'))

    def test_s3lrem(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lrem', 'ks'))
        self.assert_subs(".*wrong number.*", self.r('s3lrem', 'ks', 'uuid'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val2', '100000', 'key1', 'val3', '100000', 'key2', 'val2', '100000')
        self.assert_equal(4, self.r('s3lrem', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal([], self.r('s3lget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal(['val1', 'val2'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key2'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key', 'val', '100000', 'key', 'val', '100000', 'key', 'val2', '100000')
        self.assert_equal(2, self.r('s3lrem', 'ks', 'uuid', 'svc', 'key', 'val'))
        self.assert_equal(['val2'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key', 'val', '100000', 'key', 'val', '100000')
        self.assert_equal(['val2', 'val', 'val'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(3, self.r('s3lrem', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(['key2', 'val1', 'key2', 'val2'], self.r('s3lmget', 'ks', 'uuid', 'svc'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000')
        self.assert_equal(['key1', 'val1', 'key2', 'val2'], self.r('s3lmget', 'ks', 'uuid', 'svc2'))
        self.assert_equal(2, self.r('s3lrem', 'ks', 'uuid', 'svc2'))
        self.assert_equal(['key2', 'val1', 'key2', 'val2'], self.r('s3lmget', 'ks', 'uuid', 'svc'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.assert_equal(2, self.r('s3lrem', 'ks', 'uuid', 'svc2'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key1', 'val2', '100000', 'key2', 'val1', '100000')
        self.assert_equal(3, self.r('s3lrem', 'ks', 'uuid', 'svc2', 'key1'))
        self.assert_subs(".*wrong kind.*", self.r('s3srem', 'ks', 'uuid', 'svc'))
        self.assert_equal(0, self.r('s3srem', 'ks', 'uuid', 'nosuchsvc'))

    def test_s3srem(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3srem', 'ks'))
        self.assert_subs(".*wrong number.*", self.r('s3srem', 'ks', 'uuid'))
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val2', '100000', 'key1', 'val3', '100000', 'key2', 'val2', '100000')
        self.assert_equal(3, self.r('s3srem', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal([], self.r('s3sget', 'ks', 'uuid', 'svc', 'key1'))
        self.assert_equal(['val1', 'val2'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key2'))
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'key', 'val', '100000', 'key', 'val', '100000', 'key', 'val2', '100000')
        self.assert_equal(1, self.r('s3srem', 'ks', 'uuid', 'svc', 'key', 'val'))
        self.assert_equal(['val2'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'key', 'val', '100000', 'key', 'val', '100000')
        self.assert_equal(['val', 'val2'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(2, self.r('s3srem', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(['key2', 'val1', 'key2', 'val2'], self.r('s3smget', 'ks', 'uuid', 'svc'))
        self.r('s3smadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000')
        self.assert_equal(['key1', 'val1', 'key2', 'val2'], self.r('s3smget', 'ks', 'uuid', 'svc2'))
        self.assert_equal(2, self.r('s3srem', 'ks', 'uuid', 'svc2'))
        self.assert_equal(['key2', 'val1', 'key2', 'val2'], self.r('s3smget', 'ks', 'uuid', 'svc'))
        self.r('s3smadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key1', 'val2', '100000', 'key2', 'val1', '100000')
        self.assert_equal(2, self.r('s3srem', 'ks', 'uuid', 'svc2'))
        self.r('s3smadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key1', 'val2', '100000', 'key2', 'val1', '100000')
        self.assert_equal(2, self.r('s3srem', 'ks', 'uuid', 'svc2', 'key1'))
        self.assert_subs(".*wrong kind.*", self.r('s3lrem', 'ks', 'uuid', 'svc'))
        self.assert_equal(0, self.r('s3lrem', 'ks', 'uuid', 'nosuchsvc'))

    def test_s3lmrem(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lmrem', 'ks'))
        self.assert_subs(".*wrong number.*", self.r('s3lmrem', 'ks', 'uuid'))
        self.assert_subs(".*wrong number.*", self.r('s3lmrem', 'ks', 'uuid', 'svc'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val2', '100000', 'key1', 'val3', '100000', 'key2', 'val2', '100000')
        self.assert_equal(6, self.r('s3lmrem', 'ks', 'uuid', 'svc', 'key1', 'key2'))
        self.assert_equal(['key1', None, 'key2', None], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key1', 'key2'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key1', 'val2', '100000', 'key2', 'val1', '100000')
        self.r('s3lmadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000')
        self.r('s3lmadd', 'ks', 'uuid', 'svc', 'key3', 'val1', '100000', 'key4', 'val1', '100000')
        self.assert_equal(['key2', 'val1', 'key1', 'val1', 'key1', 'val2'], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(['key1', 'val1', 'key2', 'val2'], self.r('s3lmget', 'ks', 'uuid', 'svc2', 'key1', 'key2'))
        self.assert_equal(['key3', 'val1', 'key4', 'val1'], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key3', 'key4'))
        self.assert_equal(3, self.r('s3lmrem', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(['key1', 'val1', 'key2', 'val2'], self.r('s3lmget', 'ks', 'uuid', 'svc2', 'key1', 'key2'))
        self.assert_equal(['key3', 'val1', 'key4', 'val1'], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key3', 'key4'))
        self.assert_subs(".*wrong kind.*", self.r('s3smrem', 'ks', 'uuid', 'svc', 'key1', 'key2'))
        self.assert_equal(0, self.r('s3smrem', 'ks', 'uuid', 'nosuchsvc', 'key1', 'key2'))

    def test_s3smrem(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3smrem', 'ks'))
        self.assert_subs(".*wrong number.*", self.r('s3smrem', 'ks', 'uuid'))
        self.assert_subs(".*wrong number.*", self.r('s3smrem', 'ks', 'uuid', 'svc'))
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val2', '100000', 'key1', 'val3', '100000', 'key2', 'val2', '100000')
        self.assert_equal(5, self.r('s3smrem', 'ks', 'uuid', 'svc', 'key1', 'key2'))
        self.assert_equal(['key2', None, 'key1', None], self.r('s3smget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '100000', 'key1', 'val2', '100000', 'key2', 'val1', '100000')
        self.r('s3smadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000')
        self.r('s3smadd', 'ks', 'uuid', 'svc', 'key3', 'val1', '100000', 'key4', 'val1', '100000')
        self.assert_equal(['key2', 'val1', 'key1', 'val1', 'key1', 'val2'], self.r('s3smget', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(['key1', 'val1', 'key2', 'val2'], self.r('s3smget', 'ks', 'uuid', 'svc2', 'key1', 'key2'))
        self.assert_equal(['key3', 'val1', 'key4', 'val1'], self.r('s3smget', 'ks', 'uuid', 'svc', 'key3', 'key4'))
        self.assert_equal(3, self.r('s3smrem', 'ks', 'uuid', 'svc', 'key2', 'key1'))
        self.assert_equal(['key1', 'val1', 'key2', 'val2'], self.r('s3smget', 'ks', 'uuid', 'svc2', 'key1', 'key2'))
        self.assert_equal(['key3', 'val1', 'key4', 'val1'], self.r('s3smget', 'ks', 'uuid', 'svc', 'key3', 'key4'))
        self.assert_subs(".*wrong kind.*", self.r('s3lmrem', 'ks', 'uuid', 'svc', 'key1', 'key2'))
        self.assert_equal(0, self.r('s3lmrem', 'ks', 'uuid', 'nosuchsvc', 'key1', 'key2'))

    def test_s3lset(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lset', 'ks', 'uuid', 'svc', 'key'))
        self.assert_subs(".*wrong number.*", self.r('s3lset', 'ks', 'uuid', 'svc', 'key', 'value'))
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3lset', 'ks', 'uuid', 'svc', 'key', 'value', 'ttl'))
        self.assert_equal(1, self.r('s3lset', 'ks', 'uuid', 'svc', 'key', 'value', '100000'))
        self.assert_equal(0, self.r('s3lset', 'ks', 'uuid', 'svc', 'key', 'value', '100000'))
        self.assert_equal(['value'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val1', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val4', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val2', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val3', '100000')
        self.assert_equal(['value', 'val1', 'val4', 'val2', 'val3'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(0, self.r('s3lset', 'ks', 'uuid', 'svc', 'key', 'newvalue', '100000'))
        self.assert_equal(['newvalue'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3lset', 'ks', 'uuid', 'svc', 'forever', 'value', '0')
        self.assert_equal(['value'], self.r('s3lget', 'ks', 'uuid', 'svc', 'forever'))
        self.assert_equal(0, self.r('s3lttl', 'ks', 'uuid', 'svc', 'forever'))
        self.assert_equal(0, self.r('s3lset', 'ks', 'uuid', 'svc', 'key', 'value1', '0', 'value2', '0'))
        self.assert_equal(['key', 'value1', 'key', 'value2'], self.r('s3lmget', 'ks', 'uuid', 'svc', 'key'))

    def test_s3sset(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3sset', 'ks', 'uuid', 'svc', 'key'))
        self.assert_subs(".*wrong number.*", self.r('s3sset', 'ks', 'uuid', 'svc', 'key', 'value'))
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3sset', 'ks', 'uuid', 'svc', 'key', 'value', 'ttl'))
        self.assert_equal(1, self.r('s3sset', 'ks', 'uuid', 'svc', 'key', 'value', '100000'))
        self.assert_equal(0, self.r('s3sset', 'ks', 'uuid', 'svc', 'key', 'value', '100000'))
        self.assert_equal(['value'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val1', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val4', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val2', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val3', '100000')
        self.assert_equal(['val1', 'val2', 'val3', 'val4', 'value'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))
        self.assert_equal(0, self.r('s3sset', 'ks', 'uuid', 'svc', 'key', 'newvalue', '100000'))
        self.assert_equal(['newvalue'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3sset', 'ks', 'uuid', 'svc', 'forever', 'value', '0')
        self.assert_equal(['value'], self.r('s3sget', 'ks', 'uuid', 'svc', 'forever'))
        self.assert_equal(0, self.r('s3sttl', 'ks', 'uuid', 'svc', 'forever'))

    def test_s3lreplace(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lreplace', 'ks', 'uuid', 'svc', 'key'))
        self.assert_subs(".*wrong number.*", self.r('s3lreplace', 'ks', 'uuid', 'svc', 'key', 'value'))
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3lreplace', 'ks', 'uuid', 'svc', 'key', 'value', 'value', 'ttl'))
        self.r('s3lset', 'ks', 'uuid', 'svc', 'key', 'oldval', '100000')
        self.assert_equal(1, self.r('s3lreplace', 'ks', 'uuid', 'svc', 'key', 'oldval', 'newval', '100000'))
        self.assert_equal(0, self.r('s3lreplace', 'ks', 'uuid', 'svc', 'key', 'oldval', 'newval', '100000'))
        self.assert_equal(['newval'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '100000')
        self.assert_equal(1, self.r('s3lreplace', 'ks', 'uuid', 'svc', 'key', 'val', 'newval2', '100000'))
        self.assert_equal(['newval', 'newval2'], self.r('s3lget', 'ks', 'uuid', 'svc', 'key'))

    def test_s3sreplace(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3sreplace', 'ks', 'uuid', 'svc', 'key'))
        self.assert_subs(".*wrong number.*", self.r('s3sreplace', 'ks', 'uuid', 'svc', 'key', 'value'))
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3sreplace', 'ks', 'uuid', 'svc', 'key', 'value', 'value', 'ttl'))
        self.r('s3sset', 'ks', 'uuid', 'svc', 'key', 'oldval', '100000')
        self.assert_equal(1, self.r('s3sreplace', 'ks', 'uuid', 'svc', 'key', 'oldval', 'newval', '100000'))
        self.assert_equal(0, self.r('s3sreplace', 'ks', 'uuid', 'svc', 'key', 'oldval', 'newval', '100000'))
        self.assert_equal(['newval'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val1', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val1', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val2', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val2', '100000')
        self.assert_equal(1, self.r('s3sreplace', 'ks', 'uuid', 'svc', 'key', 'val1', 'newval2', '100000'))
        self.assert_equal(['newval', 'newval2', 'val2'], self.r('s3sget', 'ks', 'uuid', 'svc', 'key'))

    def test_s3lcount(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lcount', 'ks', 'uuid', 'svc', 'key', 'value', 'ttl'))
        self.assert_subs(".*wrong number.*", self.r('s3lcount', 'ks', 'uuid', 'svc', 'key', 'value', 'dummy', 'dummy'))
        self.assert_equal(0, self.r('s3lcount', 'ks', 'uuid', 'svc'))
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key2', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.assert_equal(['key1', 'val', 'key2', 'val'], self.r('s3lmget', 'ks', 'uuid', 'svc1', 'key1', 'key2'))
        self.assert_equal(2, self.r('s3lcount', 'ks', 'uuid', 'svc1'))
        self.assert_equal(2, self.r('s3lcount', 'ks', 'uuid', 'svc2'))
        self.assert_equal(2, self.r('s3lcount', 'ks', 'uuid', 'svc2', 'key2'))
        self.assert_equal(1, self.r('s3lcount', 'ks', 'uuid', 'svc2', 'key1'))
        self.assert_equal(2, self.r('s3lrem', 'ks', 'uuid', 'svc1'))
        self.assert_equal(2, self.r('s3lrem', 'ks', 'uuid', 'svc2'))
        self.assert_equal(0, self.r('s3lcount', 'ks', 'uuid', 'svc1'))
        self.assert_equal(0, self.r('s3lcount', 'ks', 'uuid', 'svc2'))
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key3', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc3', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc4', 'key1', 'val', '100000')
        self.assert_equal(3, self.r('s3lcount', 'ks', 'uuid', 'svc1', 'key1', 'val'))
        self.assert_equal(2, self.r('s3lcount', 'ks', 'uuid', 'svc2', 'key2', 'val'))
        self.assert_equal(3, self.r('s3lcount', 'ks', 'uuid', 'svc1', 'key1'))
        self.assert_equal(1, self.r('s3lcount', 'ks', 'uuid', 'svc2', 'key1'))
        self.assert_equal(3, self.r('s3lcount', 'ks', 'uuid', 'svc2'))
        self.assert_equal(1, self.r('s3lcount', 'ks', 'uuid', 'svc3'))
        self.assert_equal(4, self.r('s3lcount', 'ks', 'uuid'))
        self.assert_equal(0, self.r('s3scount', 'ks', 'uuid'))

    def test_s3scount(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3scount', 'ks', 'uuid', 'svc', 'key', 'value', 'ttl'))
        self.assert_subs(".*wrong number.*", self.r('s3scount', 'ks', 'uuid', 'svc', 'key', 'value', 'dummy', 'dummy'))
        self.assert_equal(0, self.r('s3scount', 'ks', 'uuid', 'svc'))
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.assert_equal(['key1', 'val', 'key2', 'val'], self.r('s3smget', 'ks', 'uuid', 'svc2', 'key1', 'key2'))
        self.assert_equal(2, self.r('s3scount', 'ks', 'uuid', 'svc1'))
        self.assert_equal(2, self.r('s3scount', 'ks', 'uuid', 'svc2'))
        self.assert_equal(1, self.r('s3scount', 'ks', 'uuid', 'svc2', 'key2'))
        self.assert_equal(1, self.r('s3scount', 'ks', 'uuid', 'svc2', 'key1'))
        self.assert_equal(2, self.r('s3srem', 'ks', 'uuid', 'svc1'))
        self.assert_equal(2, self.r('s3srem', 'ks', 'uuid', 'svc2'))
        self.assert_equal(0, self.r('s3scount', 'ks', 'uuid', 'svc1'))
        self.assert_equal(0, self.r('s3scount', 'ks', 'uuid', 'svc2'))
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key1', 'val2', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key3', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc3', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc4', 'key1', 'val', '100000')
        self.assert_equal(1, self.r('s3scount', 'ks', 'uuid', 'svc1', 'key1', 'val'))
        self.assert_equal(1, self.r('s3scount', 'ks', 'uuid', 'svc2', 'key2', 'val'))
        self.assert_equal(1, self.r('s3scount', 'ks', 'uuid', 'svc1', 'key1'))
        self.assert_equal(2, self.r('s3scount', 'ks', 'uuid', 'svc2', 'key1'))
        self.assert_equal(3, self.r('s3scount', 'ks', 'uuid', 'svc2'))
        self.assert_equal(1, self.r('s3scount', 'ks', 'uuid', 'svc3'))
        self.assert_equal(4, self.r('s3scount', 'ks', 'uuid'))
        self.assert_equal(0, self.r('s3lcount', 'ks', 'uuid'))

    def test_s3lexists(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lexists', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*wrong number.*", self.r('s3lexists', 'ks', 'uuid', 'svc', 'key', 'value', 'value2'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '100000')
        self.assert_equal(0, self.r('s3lexists', 'ks', 'uuid', 'svc', 'key', 'val2'))
        self.assert_equal(1, self.r('s3lexists', 'ks', 'uuid', 'svc', 'key', 'val'))
        self.assert_equal(0, self.r('s3lexists', 'ks', 'uuid', 'svc', 'key2'))
        self.assert_equal(1, self.r('s3lexists', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3lrem', 'ks', 'uuid', 'svc', 'key')
        self.assert_equal(0, self.r('s3lexists', 'ks', 'uuid', 'svc', 'key', 'val2'))
        self.assert_equal(0, self.r('s3lexists', 'ks', 'uuid', 'svc', 'key', 'val'))
        self.assert_equal(0, self.r('s3lexists', 'ks', 'uuid', 'svc', 'key2'))
        self.assert_equal(0, self.r('s3lexists', 'ks', 'uuid', 'svc', 'key'))

    def test_s3sexists(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3sexists', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*wrong number.*", self.r('s3sexists', 'ks', 'uuid', 'svc', 'key', 'value', 'value2'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val', '100000')
        self.assert_equal(0, self.r('s3sexists', 'ks', 'uuid', 'svc', 'key', 'val2'))
        self.assert_equal(1, self.r('s3sexists', 'ks', 'uuid', 'svc', 'key', 'val'))
        self.assert_equal(0, self.r('s3sexists', 'ks', 'uuid', 'svc', 'key2'))
        self.assert_equal(1, self.r('s3sexists', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3srem', 'ks', 'uuid', 'svc', 'key')
        self.assert_equal(0, self.r('s3sexists', 'ks', 'uuid', 'svc', 'key', 'val2'))
        self.assert_equal(0, self.r('s3sexists', 'ks', 'uuid', 'svc', 'key', 'val'))
        self.assert_equal(0, self.r('s3sexists', 'ks', 'uuid', 'svc', 'key2'))
        self.assert_equal(0, self.r('s3sexists', 'ks', 'uuid', 'svc', 'key'))

    def test_s3lexpire(self):
        self.r('del', 'uuid')
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3lexpire', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3lexpire', 'ks', 'uuid', 'svc', 'key', 'value', '100000'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc', 'key1', 'val1'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) <= 9950)
        self.assert_equal(1, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc', 'key1'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) <= 9950)
        self.assert_equal(1, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc', 'key2', 'val2'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val1')) > 9950)
        self.assert_equal(0, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc2'))
        self.assert_equal(0, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc3', 'key1'))
        self.assert_equal(0, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc3', 'key1', 'value'))
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc3', 'key2', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc4', 'key2', 'val2', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3lexpire', 'ks', 'uuid', '1000000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val2')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc2', 'key2', 'val1')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc3', 'key2', 'val2')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc4', 'key2', 'val2')) > 9950)
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc3', 'key2', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc4', 'key2', 'val2', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        self.assert_equal(0, self.r('s3sexpire', 'ks', 'uuid', '1000000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val2')) <= 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc2', 'key2', 'val1')) <= 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc3', 'key2', 'val2')) <= 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc4', 'key2', 'val2')) <= 9950)
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key1', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3lexpire', 'ks', 'uuid', '1000000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key1', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3sexpire', 'ks', 'uuid', '1000000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key1', 'val1')) > 9950)

    def test_s3sexpire(self):
        self.r('del', 'uuid')
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3sexpire', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3sexpire', 'ks', 'uuid', 'svc', 'key', 'value', '100000'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc', 'key1', 'val1'))
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) <= 9950)
        self.assert_equal(1, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc', 'key1'))
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) <= 9950)
        self.assert_equal(1, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc', 'key2', 'val2'))
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key2', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc'))
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key2', 'val1')) > 9950)
        self.assert_equal(0, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc2'))
        self.assert_equal(0, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc3', 'key1'))
        self.assert_equal(0, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc3', 'key1', 'value'))
        self.r('del', 'uuid')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key2', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc3', 'key2', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc4', 'key2', 'val2', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3sexpire', 'ks', 'uuid', '1000000'))
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc1', 'key1', 'val2')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key2', 'val1')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc3', 'key2', 'val2')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc4', 'key2', 'val2')) > 9950)
        self.r('del', 'uuid')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key2', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc3', 'key2', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc4', 'key2', 'val2', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        self.assert_equal(0, self.r('s3lexpire', 'ks', 'uuid', '1000000'))
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc1', 'key1', 'val2')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key2', 'val1')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc3', 'key2', 'val2')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc4', 'key2', 'val2')) <= 9950)
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key1', 'val1')) <= 9950)
        self.assert_equal(1, self.r('s3sexpire', 'ks', 'uuid', '1000000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key1', 'val1')) > 9950)
        self.assert_equal(1, self.r('s3lexpire', 'ks', 'uuid', '1000000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key1', 'val1')) > 9950)

    def test_s3lttl(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lttl', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*wrong number.*", self.r('s3lttl', 'ks', 'uuid', 'svc', 'key', 'value', 'value'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'value2', '50000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'value', '100000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key', 'value')) <= 99950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key', 'value2')) <= 49950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key')) <= 49950)
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key', 'val', '50')
        time.sleep(100/1000.0)
        self.assert_equal(-1, self.r('s3lttl', 'ks', 'uuid', 'svc', 'key', 'val'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'forever', 'value', '0')
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'forever', 'value')) == 0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'forever')) == 0)

    def test_s3sttl(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3sttl', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*wrong number.*", self.r('s3sttl', 'ks', 'uuid', 'svc', 'key', 'value', 'value'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'value', '50000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'value2', '100000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key', 'value2')) <= 99950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key', 'value')) <= 49950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key')) <= 49950)
        self.r('del', 'uuid')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key', 'val', '50')
        time.sleep(100/1000.0)
        self.assert_equal(-1, self.r('s3sttl', 'ks', 'uuid', 'svc', 'key', 'val'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'forever', 'value', '0')
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'forever', 'value')) == 0)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'forever')) == 0)

    def test_s3lmexpire(self):
        self.r('del', 'uuid')
        self.r('s3lset', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000')
        self.r('s3lset', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000')
        self.r('s3lset', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        self.assert_equal(1, self.r('s3lmexpire', 'ks', 'uuid', 'svc', '100000', 'key1'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) <= 10000)
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3lmexpire', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*wrong number.*", self.r('s3lmexpire', 'ks', 'uuid', 'svc', '100000'))
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3lmexpire', 'ks', 'uuid', 'svc', 'key', 'value', '100000'))
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key1', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val1', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) <= 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) <= 9950)
        self.assert_equal(1, self.r('s3lmexpire', 'ks', 'uuid', 'svc', '100000', 'key1'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val1')) <= 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) <= 9950)
        self.assert_equal(1, self.r('s3lmexpire', 'ks', 'uuid', 'svc', '1000000', 'key1', 'key2'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) > 99500)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) > 99500)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val1')) > 99500)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) > 99500)
        self.assert_equal(0, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc2'))
        self.assert_equal(0, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc3', 'key1'))
        self.assert_equal(0, self.r('s3lexpire', 'ks', 'uuid', '1000000', 'svc3', 'key1', 'value'))
        self.assert_subs(".*wrong kind.*", self.r('s3smexpire', 'ks', 'uuid', 'svc', '100000', 'key1'))

    def test_s3smexpire(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3smexpire', 'ks', 'uuid', 'svc'))
        self.assert_subs(".*wrong number.*", self.r('s3smexpire', 'ks', 'uuid', 'svc', '100000'))
        self.assert_subs(".*ERR ttl value is not a integer or out of range.*", self.r('s3smexpire', 'ks', 'uuid', 'svc', 'key', 'value', '100000'))
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key1', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val1', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc', 'key2', 'val2', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) <= 9950)
        self.assert_equal(1, self.r('s3smexpire', 'ks', 'uuid', 'svc', '100000', 'key1'))
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key2', 'val1')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) <= 9950)
        self.assert_equal(1, self.r('s3smexpire', 'ks', 'uuid', 'svc', '1000000', 'key1', 'key2'))
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val1')) > 99500)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key1', 'val2')) > 99500)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key2', 'val1')) > 99500)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc', 'key2', 'val2')) > 99500)
        self.assert_equal(0, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc2'))
        self.assert_equal(0, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc3', 'key1'))
        self.assert_equal(0, self.r('s3sexpire', 'ks', 'uuid', '1000000', 'svc3', 'key1', 'value'))
        self.assert_subs(".*wrong kind.*", self.r('s3lmexpire', 'ks', 'uuid', 'svc', '100000', 'key1'))

    def test_s3rem(self):
        self.r('del', 'uuid')
        self.r('del', 'uuid2')
        self.assert_subs(".*wrong number.*", self.r('s3rem', 'ks'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.assert_subs(".*wrong kind.*", self.r('s3smadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '100000'))
        self.r('s3smadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key3', 'val3', '100000')
        self.assert_equal(1, self.r('s3rem', 'ks', 'uuid'))
        self.assert_equal([], self.r('s3lkeys', 'ks', 'uuid', 'svc1'))
        self.assert_equal([], self.r('s3lvals', 'ks', 'uuid', 'svc1'))
        self.assert_equal([], self.r('s3skeys', 'ks', 'uuid', 'svc2'))
        self.assert_equal([], self.r('s3svals', 'ks', 'uuid', 'svc2'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.r('s3smadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key3', 'val3', '100000')
        self.assert_equal(['key1', 'key2'], self.r('s3lkeys', 'ks', 'uuid', 'svc2'))
        self.assert_equal(['val1', 'val1', 'val1'], self.r('s3lvals', 'ks', 'uuid', 'svc2'))
        self.assert_equal(['key1', 'key2', 'key3'], self.r('s3skeys', 'ks', 'uuid', 'svc1'))
        self.assert_equal(['val1', 'val2', 'val3'], self.r('s3svals', 'ks', 'uuid', 'svc1'))
        self.r('s3lmadd', 'ks', 'uuid2', 'svc1', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key1', 'val1', '100000')
        self.r('s3lmadd', 'ks', 'uuid2', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key2', 'val2', '100000')
        self.r('s3lmadd', 'ks2', 'uuid2', 'svc1', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key1', 'val1', '100000')
        self.r('s3lmadd', 'ks2', 'uuid2', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key2', 'val2', '100000')

    def test_s3mrem(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3mrem', 'ks'))
        self.assert_subs(".*wrong number.*", self.r('s3mrem', 'ks', 'uuid'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.assert_subs(".*wrong kind.*", self.r('s3smadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '100000'))
        self.r('s3smadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key3', 'val3', '100000')
        self.assert_equal(1, self.r('s3mrem', 'ks', 'uuid', 'svc1', 'nosuchsvc'))
        self.assert_equal([], self.r('s3lkeys', 'ks', 'uuid'))
        self.assert_equal(['svc2'], self.r('s3skeys', 'ks', 'uuid'))
        self.assert_equal(1, self.r('s3mrem', 'ks', 'uuid', 'svc2'))
        self.assert_equal(0, self.r('s3mrem', 'ks', 'uuid', 'svc1', 'svc2'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.r('s3smadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key3', 'val3', '100000')
        self.assert_equal(2, self.r('s3mrem', 'ks', 'uuid', 'svc1', 'svc2'))
        self.assert_equal([], self.r('s3lkeys', 'ks', 'uuid'))
        self.assert_equal([], self.r('s3skeys', 'ks', 'uuid'))

    def test_s3keys(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3keys', 'ks'))
        self.assert_subs(".*wrong number.*", self.r('s3keys', 'ks', 'uuid', 'svc'))
        self.r('s3lmadd', 'ks', 'uuid', 'svc1', 'key1', 'val1', '100000', 'key1', 'val1', '100000', 'key2', 'val1', '100000')
        self.r('s3smadd', 'ks', 'uuid', 'svc2', 'key1', 'val1', '100000', 'key2', 'val2', '100000', 'key3', 'val3', '100000')
        self.assert_equal(['svc1', 'svc2'], self.r('s3keys', 'ks', 'uuid'))
        self.r('s3lrem', 'ks', 'uuid', 'svc1')
        self.assert_equal(['svc2'], self.r('s3keys', 'ks', 'uuid'))
        self.r('del', 'uuid')
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc3', 'key3', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc4', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc5', 'key1', 'val', '100000')
        self.assert_equal(['svc1', 'svc2', 'svc3', 'svc4', 'svc5'], self.r('s3keys', 'ks', 'uuid'))
        self.r('set', 'uuid', '10000')
        self.assert_subs(".*wrong kind.*", self.r('s3keys', 'ks', 'uuid'))

    def test_s3count(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3count', 'ks'))
        self.assert_subs(".*wrong number.*", self.r('s3count', 'ks', 'uuid', 'svc'))
        self.assert_equal(0, self.r('s3count', 'ks', 'uuid'))
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc2', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc3', 'key1', 'val', '100000')
        self.r('s3ladd', 'ks', 'uuid', 'svc4', 'key2', 'val', '100000')
        self.r('s3sadd', 'ks', 'uuid', 'svc5', 'key2', 'val', '100000')
        self.assert_equal(2, self.r('s3lcount', 'ks', 'uuid'))
        self.assert_equal(3, self.r('s3scount', 'ks', 'uuid'))
        self.assert_equal(5, self.r('s3count', 'ks', 'uuid'))
        self.r('s3srem', 'ks', 'uuid', 'svc1')
        self.assert_equal(4, self.r('s3count', 'ks', 'uuid'))
        self.r('s3lrem', 'ks', 'uuid', 'svc4')
        self.assert_equal(3, self.r('s3count', 'ks', 'uuid'))
        self.r('set', 'uuid', '10000')
        self.assert_subs(".*wrong kind.*", self.r('s3count', 'ks', 'uuid'))

    def test_s3expire(self):
        self.r('del', 'uuid')
        self.assert_subs(".*wrong number.*", self.r('s3expire', 'ks'))
        self.assert_subs(".*wrong number.*", self.r('s3expire', 'ks', 'uuid'))
        self.assert_subs(".*wrong number.*", self.r('s3expire', 'ks', 'uuid', 'svc', 'key'))
        self.r('s3ladd', 'ks', 'uuid', 'svc1', 'key', 'val', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc2', 'key', 'val', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc3', 'key', 'val', '10000')
        self.r('s3sadd', 'ks', 'uuid', 'svc4', 'key', 'val', '10000')
        self.r('s3ladd', 'ks', 'uuid', 'svc5', 'key', 'val', '10000')
        time.sleep(50/1000.0)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key', 'val')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key', 'val')) <= 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc3', 'key', 'val')) <= 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc4', 'key', 'val')) <= 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc5', 'key', 'val')) <= 9950)
        self.assert_equal(1, self.r('s3expire', 'ks', 'uuid', '100000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key', 'val')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key', 'val')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc3', 'key', 'val')) > 9950)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc4', 'key', 'val')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc5', 'key', 'val')) > 9950)
        self.assert_equal(1, self.r('s3lexpire', 'ks', 'uuid', '8000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key', 'val')) <= 8000)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key', 'val')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc3', 'key', 'val')) <= 8000)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc4', 'key', 'val')) > 9950)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc5', 'key', 'val')) <= 8000)
        self.assert_equal(1, self.r('s3expire', 'ks', 'uuid', '8000'))
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc1', 'key', 'val')) <= 8000)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc2', 'key', 'val')) <= 8000)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc3', 'key', 'val')) <= 8000)
        assert(int(self.r('s3sttl', 'ks', 'uuid', 'svc4', 'key', 'val')) <= 8000)
        assert(int(self.r('s3lttl', 'ks', 'uuid', 'svc5', 'key', 'val')) <= 8000)

    def test_dump_restore(self):
        self.r('del', 'uuid')
        self.r('s3sadd', 'ks', 'uuid', 'svc1', 'key1', 'val', '100000')
        payload = self.r('dump', 'uuid')
        self.r('del', 'uuid')
        self.r('restore', 'uuid', '0', payload)
        assert(self.r('s3sget', 'ks', 'uuid', 'svc1', 'key1') == ['val'])

    def _kS(self, uuid, svc, key, count, ttl, assertf = None):
        for i in range(count):
            resp = self.r('s3sadd', '*', uuid, svc, key, 'v%d' % i, ttl)
            if assertf:
                assertf(resp)

    def _kL(self, uuid, svc, key, count, ttl, assertf = None):
        for i in range(count):
            resp = self.r('s3ladd', '*', uuid, svc, key, 'v%d' % i, ttl)
            if assertf:
                assertf(resp)

    def test_set_list_mode_is_determined_by_svc_level(self):
        r = self.r
        # Set first
        r('del', 'uuid')
        self._kS('uuid', 'svc0', 'k1', 10, 3600000, assert_1)
        self._kS('uuid', 'svc0', 'k1', 10, 3600000, assert_0)
        self._kL('uuid', 'svc0', 'k1', 10, 3600000, assert_wrongtype)
        self._kL('uuid', 'svc0', 'k2', 10, 3600000, assert_wrongtype)
        self._kS('uuid', 'svc1', 'k1', 10, 3600000, assert_1)
        self._kS('uuid', 'svc1', 'k1', 10, 3600000, assert_0)
        # List first
        r('del', 'uuid')
        self._kL('uuid', 'svc0', 'k1', 10, 3600000, assert_1)
        self._kL('uuid', 'svc0', 'k1', 10, 3600000, assert_1)
        self._kS('uuid', 'svc0', 'k1', 10, 3600000, assert_wrongtype)
        self._kS('uuid', 'svc0', 'k2', 10, 3600000, assert_wrongtype)
        self._kL('uuid', 'svc1', 'k1', 10, 3600000, assert_1)
        self._kL('uuid', 'svc1', 'k1', 10, 3600000, assert_1)

    def test_mget_of_duplicated_keys(self):
        r = self.r
        r('del', 'uuid')
        self._kS('uuid', 'svc0', 'k1', 10, 3600000, assert_1)
        self._kS('uuid', 'svc0', 'k2', 10, 3600000, assert_1)
        self._kS('uuid', 'svc0', 'k3', 10, 3600000, assert_1)
        keys = ['k1', 'k1', 'k2', 'k3', 'k3', 'k2']
        resp = r('s3smget', '*', 'uuid', 'svc0', *keys)
        idx = 0
        for key in keys:
            for i in range(10):
                # return value is key value pair
                assert(resp[idx*2] == key), (resp[idx], key)
                idx = idx + 1

    def test_sxskeys_returns_keys_in_lexi_order(self):
        r = self.r
        r('del', 'uuid')
        self._kS('uuid', 'svc0', 'k2', 10, 3600000, assert_1)
        self._kS('uuid', 'svc0', 'k1', 10, 3600000, assert_1)
        resp = r('s3skeys', '*', 'uuid', 'svc0')
        assert resp == ['k1', 'k2'], resp
        r = self.r
        r('del', 'uuid')
        self._kL('uuid', 'svc0', 'k2', 10, 3600000, assert_1)
        self._kL('uuid', 'svc0', 'k1', 10, 3600000, assert_1)
        resp = r('s3lkeys', '*', 'uuid', 'svc0')
        assert resp == ['k1', 'k2'], resp

    def test_s3mget_lots_of_keys(self):
        r = self.r
        r('del', 'uuid')
        self._kS('uuid', 'svc0', 'k1', 1, 3600000, assert_1)
        keys = ['k1']*65536
        resp = r('s3smget', '*', 'uuid', 'svc0', *keys)

if __name__ == '__main__':
    if len(sys.argv) == 2:
        access_port = int(sys.argv.pop())
    elif len(sys.argv) > 2:
        raise 'only <port> argument is allowed'
    unittest.main()
